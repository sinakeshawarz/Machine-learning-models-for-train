import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# 1. Simulate Housing Dataset
np.random.seed(42)
house_size = np.random.uniform(500, 4000, 100).reshape(-1, 1)  # Size of houses in sqft
house_price = 150 * house_size.flatten() + np.random.normal(0, 20000, 100)  # Prices with noise

# 2. Split Dataset into Training (70%), Validation (15%), and Test (15%)
X_train, X_temp, y_train, y_temp = train_test_split(house_size, house_price, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# 3. Train Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# 4. Evaluate Model on Validation Set
y_val_pred = model.predict(X_val)
val_mse = mean_squared_error(y_val, y_val_pred)
val_r2 = r2_score(y_val, y_val_pred)
print(f"Validation Set Performance:")
print(f"Mean Squared Error (MSE): {val_mse:.2f}")
print(f"R^2 Score: {val_r2:.2f}")

# 5. Evaluate Model on Test Set
y_test_pred = model.predict(X_test)
test_mse = mean_squared_error(y_test, y_test_pred)
test_r2 = r2_score(y_test, y_test_pred)
print(f"\nTest Set Performance:")
print(f"Mean Squared Error (MSE): {test_mse:.2f}")
print(f"R^2 Score: {test_r2:.2f}")

# 6. Visualize Results
plt.figure(figsize=(10, 6))
plt.scatter(X_train, y_train, color="blue", label="Training Data", alpha=0.6)
plt.scatter(X_val, y_val, color="orange", label="Validation Data", alpha=0.6)
plt.scatter(X_test, y_test, color="green", label="Test Data", alpha=0.6)
plt.plot(house_size, model.predict(house_size), color="red", label="Regression Line")
plt.title("Linear Regression: House Price Prediction")
plt.xlabel("House Size (sqft)")
plt.ylabel("Price ($)")
plt.legend()
plt.grid(True)
plt.show()
