# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# 1. Simulate a Dataset for Petroleum Production Engineering
# Setting a random seed for reproducibility
np.random.seed(42)

# Time (days)
num_samples = 100
time = np.arange(1, num_samples + 1)  # Days from 1 to 100

# Pressure (psi): Starts high and decreases over time
pressure = 4000 - 15 * time + np.random.normal(0, 100, num_samples)  # Gradual decrease with noise

# Temperature (°F): Fluctuates around a mean value
temperature = 150 + 10 * np.sin(0.1 * time) + np.random.normal(0, 2, num_samples)  # Sinusoidal fluctuations

# Injection Flow Rate (bbl/day): Gradually increases over time
injection_flow_rate = 200 + 5 * time + np.random.normal(0, 20, num_samples)  # Gradual increase with noise

# Reservoir Permeability (mD): Slightly fluctuates around a mean value
permeability = 100 + np.random.normal(0, 5, num_samples)  # Mostly constant with small random noise

# Combine into a single array
X = np.column_stack((time, pressure, temperature, injection_flow_rate, permeability))

# Assign column names for better understanding
columns = [
    'Time (days)', 
    'Pressure (psi)', 
    'Temperature (°F)', 
    'Injection Flow Rate (bbl/day)', 
    'Reservoir Permeability (mD)'
]
X_df = pd.DataFrame(X, columns=columns)

# Simulate dependent variable (target): Oil Production Rate (bbl/day)
# The relationship includes coefficients for each feature and noise
true_coefficients = [0.1, 0.02, -0.4, 0.1, 0.05]  # Coefficients for each feature
y = (
    true_coefficients[0] * time
    + true_coefficients[1] * pressure
    + true_coefficients[2] * temperature
    + true_coefficients[3] * injection_flow_rate
    + true_coefficients[4] * permeability
    + np.random.normal(0, 5, num_samples)  # Adding noise
)

# Add the target variable to the DataFrame
data = X_df.copy()
data['Oil Production Rate (bbl/day)'] = y

# 2. Split the dataset into Training (70%), Validation (15%), and Test (15%) sets
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# 3. Train a Multiple Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# 4. Evaluate the Model on the Validation Set
y_val_pred = model.predict(X_val)
val_mse = mean_squared_error(y_val, y_val_pred)
val_r2 = r2_score(y_val, y_val_pred)
print("Validation Set Performance:")
print(f"Mean Squared Error (MSE): {val_mse:.2f}")
print(f"R^2 Score: {val_r2:.2f}")

# 5. Evaluate the Model on the Test Set
y_test_pred = model.predict(X_test)
test_mse = mean_squared_error(y_test, y_test_pred)
test_r2 = r2_score(y_test, y_test_pred)
print("\nTest Set Performance:")
print(f"Mean Squared Error (MSE): {test_mse:.2f}")
print(f"R^2 Score: {test_r2:.2f}")

# 6. Display the Learned Coefficients and Intercept
print("\nLearned Coefficients (Feature Weights):", model.coef_)
print("Learned Intercept:", model.intercept_)

# 7. Visualize the Actual vs. Predicted Values for the Test Set
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_test_pred, color="blue", alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color="red", linestyle="--", label="Perfect Prediction")
plt.title("Actual vs. Predicted Oil Production Rate (Test Set)")
plt.xlabel("Actual Oil Production Rate (bbl/day)")
plt.ylabel("Predicted Oil Production Rate (bbl/day)")
plt.legend()
plt.grid(True)
plt.show()

# 8. Display the first few rows of the simulated dataset
print("Sample of Simulated Dataset:")
print(data.head(10))
